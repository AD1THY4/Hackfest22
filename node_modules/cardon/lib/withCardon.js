var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { CardonManager } from "./CardonManager";
/**
 * Wraps the component you want to make reusable and returns the `'show'` and `'hide'` functions within an object.
 *
 * @template P The type of props value
 * @template R The type of return value
 * @param component The component to show.
 * @param options Options
 * @returns
 * ```
 * {
 *   show: (args?: P, callback?: (result: P) => void): Promise<R>,
 *   hide: () => void,
 * }
 * ```
 */
export function withCardon(component, options) {
    var onShow = function () { };
    function WithCardonEnchanted() {
        var _a = React.useState({ props: {}, resolve: function (data) { } }), params = _a[0], setParams = _a[1];
        var _b = React.useState(false), visible = _b[0], setVisible = _b[1];
        onShow = function (resolve, params) {
            setParams({ props: params || {}, resolve: resolve });
            setVisible(true);
        };
        var get = function (data) { return function () {
            params.resolve(data);
            setVisible(false);
        }; };
        var customProps = {
            get: get,
            visible: visible
        };
        if ((options === null || options === void 0 ? void 0 : options.destroyOnHide) && !visible)
            return null;
        var Component = component;
        return (_jsx(Component, __assign({}, params.props, customProps), void 0));
    }
    CardonManager.append(WithCardonEnchanted);
    var resolveFunc = function (value) { };
    var show = function (props, callback) {
        var promise = new Promise(function (resolve) {
            onShow(resolve, props);
            resolveFunc = resolve;
        });
        if (callback && typeof callback === "function") {
            promise.then(function (data) { return callback(data); });
        }
        return promise;
    };
    var hide = function () {
        if (resolveFunc) {
            resolveFunc(null);
            resolveFunc = function (value) { };
        }
    };
    var result = {
        show: show,
        hide: hide
    };
    return result;
}
