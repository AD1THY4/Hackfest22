import React from "react";
export declare type WithCardonGet<T> = (data?: T) => VoidFunction;
export interface WithCardonProps<R> {
    /**
     * Represents whether the card is visible or not.
     */
    visible: boolean;
    /**
     * Represents the function that generates the callback functions. It can be returned by passing data into the parameter.
     */
    get: WithCardonGet<R>;
}
export declare type WithCardonOptions = {
    /**
     * Enables destroy the component while hiding.
     *
     * When you do not change this property, the component will not be removed from the root and you will need to hide it with the 'visible' property manually.
     *
     * Default value is `'false'`
     */
    destroyOnHide?: boolean;
};
export declare type WithCardonShow<P, R> = (props?: P, callback?: (result: R) => void) => Promise<R>;
export declare type WithCardonResult<T, P> = {
    /**
     * Shows the card component. Card props can be passed optionally.
     */
    show: WithCardonShow<T, P>;
    /**
     * Hides the card.
     *
     * By default, it calls the 'get' method that comes as props: `get(null)`
     */
    hide: () => void;
};
/**
 * Wraps the component you want to make reusable and returns the `'show'` and `'hide'` functions within an object.
 *
 * @template P The type of props value
 * @template R The type of return value
 * @param component The component to show.
 * @param options Options
 * @returns
 * ```
 * {
 *   show: (args?: P, callback?: (result: P) => void): Promise<R>,
 *   hide: () => void,
 * }
 * ```
 */
export declare function withCardon<P, R = {}>(component: React.ComponentType<P & WithCardonProps<R>>, options?: WithCardonOptions): WithCardonResult<P, R>;
